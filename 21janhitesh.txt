Q1=What are generators example for generators (print starting date -todays to 5 days)Using	generators concepts?
Ans=
import datetime
def gen_date():
  i=0
  while i<5:
    yield datetime.date.today() + datetime.timedelta(days=i)
    i=i+1

for i in gen_date():
  print(i)

Q2=What are djangosessions?
Ans=Sessions are the mechanism used by Django (and most of the Internet) for keeping track of the "state" between the site and a particular browser. Sessions allow you to store arbitrary data per browser, and have this data available to the site whenever the browser connects.

Q3=count the number of words preasent in the paragraph given below
The horizontal offset of the shadow. A positive value puts the shadow on the right side of the box, a negative value puts the shadow on the left side of the box "
Ans=

Q4=Write a query to find the max marks from the student table?
Ans=SELECT max( mark ) FROM student

Q5=Write a query to find the second highest marks from student table?
Ans=SELECT mark FROM student ORDER BY mark DESC LIMIT 1 OFFSET 1

Q6=How can I remove a specific item from an array?
Ans=const array = [2, 5, 9];

console.log(array);

const index = array.indexOf(5);
if (index > -1) {
  array.splice(index, 1);
}

// array = [2, 9]
console.log(array); 

let value = 3

let arr = [1, 2, 3, 4, 5, 3]

arr = arr.filter(item => item !== value)

console.log(arr)
// [ 1, 2, 4, 5 ]

Q7=[0,1,1,1,1,1,1,0,0,0,0,0] find number of 1 and number of 0 from List without using if.. else, 
module, library .
Ans=By using sum approach (we can add all the number and by subtracting the sum from the n)

Q8=What is Event Looping?
Ans=Event loop: An event loop is something that pulls stuff out of the queue and places it onto the function execution stack whenever the function stack becomes empty.

Q9=What is Errorboundry? Why use it and how
Ans=Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.

Q10=What is Rediss?
Ans=Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker.

Q11=What will indexof return if value is not found?
Ans=array. indexOf(element) returns the index of the element in the array. Read the official documentation as well. It was designed to return -1 when the element doesn't exist, because 0 would mean that the element is in the 0th index (1st element).

Q12=How many ways to empty an array?
Ans=arr.splice(0, arr.length)

Q13=Why get is not secure?
Ans=GET is less secure compared to POST because data sent is part of the URL. So it's saved in browser history and server logs in plaintext. POST is a little safer than GET because the parameters are not stored in browser history or in web server logs. ... POST method used when sending passwords or other sensitive information.

Q14=Difference between mcv and mvp.? What we use generally in django?
Ans=For MVC, the difference is that the view will get the data from the model class instead of the presenter class in MVP. This method handles the data passing from model to view. In MVP, this is done in the presenter class, and in MVC, it's done in the model class.

Q15=What are Django cookies?
Ans=A cookie is a small piece of information which is stored in the client browser. It is used to store user's data in a file permanently (or for the specified time). Cookie has its expiry date and time and removes automatically when gets expire. Django provides built-in methods to set and fetch cookie.

Q16=Difference Between filter and get?
Ans=The Difference between Django's filter() and get() methods are: get throws an error if there's no object matching the query. ... Basically use get() when you want to get a single unique object, and filter() when you want to get all objects that match your lookup parameters.

Q17=Django Templating?
Ans=Django provides a convenient way to generate dynamic HTML pages by using its template system.
A template consists of static parts of the desired HTML output as well as some special syntax describing how dynamic content will be inserted.

Q18=MVC and MVT models
Ans=MVC has controller that drives both Model and View. MVT has Views for receiving HTTP request and returning HTTP response.The main difference between MVC and MVT is that in a Model View Controller pattern, we have to write all the control specific code. But in an MVT, the controller part is taken care of by the framework itself.

Q19=Django Security Measures
Ans=Django does a great job at user authentication and authorization. The Django authentication system provides the means for developers to manage users of the system and to define permissions for each user. ... Django also provides CSRF protection by default.

Q20=Pagination
Ans=Pagination, also known as paging, is the process of dividing a document into discrete pages, either electronic pages or printed pages.agination refers to reducing the number of records from a structured query language (SEQUEL or SQL) query result sets

Q21=Functional Endpoints
Ans=In principle, functional endpoints (which in the Django Rest Framework are called actions) perform tasks that don't fall under CRUD â€“ for example, sending a password reset request. We've been building an application throughout this series that allows managing loaned items.

Q22=Nested Comprehension
Ans=Nested list comprehension  
matrix = [[j for j in range(5)] for i in range(5)]

print(matrix)

Q23=What is Numpy
Ans= NumPy is a Python library used for working with arrays. It also has functions for working in domain of linear algebra, fourier transform, and matrices. NumPy consumes less memory as compared to Pandas.

Q24=What is Pandas
Ans=pandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the Python programming language.

Q25=How bootstrap grid works behind in css (Media query)
Ans=Bootstrap uses CSS media queries to establish these Responsive Breakpoints. They enable you to control Column behavior at different screen widths. The col-sm-6 means use 6 of 12 columns wide (50%), on a typical small device width (greater than or equal to 768 px)

Q26=Under what conditions do you use Callbacks in JavaScript? 
Ans=If we want to execute a function right after the return of some other function, then callbacks can be used. JavaScript functions have the type of Objects. So, much like any other objects (String, Arrays etc.), They can be passed as an argument to any other function while calling.

Q27=Event loop. 
Ans=The call stack is a LIFO queue (Last In, First Out). The event loop continuously checks the call stack to see if there's any function that needs to run. While doing so, it adds any function call it finds to the call stack and executes each one in order

Q28=what is Props drilling
Ans=Prop Drilling is the process by which you pass data from one part of the React Component tree to another by going through other parts that do not need the data but only help in passing it around . ... This may continue until the data gets to the ComponentNeedingProps .

Q29=find the 2nd highest value from the list 
Ans=def findLargest(arr):
	secondLargest = arr[0]
	largest = arr[0]
	for i in range(len(arr)):
		if arr[i] > largest:
			largest = arr[i]

	for i in range(len(arr)):
		if arr[i] > secondLargest and arr[i] != largest:
			secondLargest = arr[i]

	return secondLargest


print(findLargest([10, 20, 4, 45, 99]))

Q30=Filtering
Ans=Django REST Framework's generic list view, by default, returns the entire query sets for a model manager. For real-world applications, it is necessary to filter the queryset to retrieve the relevant results based on the need.

Q31=Generators and Iterators
Ans=Iterators are used mostly to iterate or convert other objects to an iterator using iter() function. Generators are mostly used in loops to generate an iterator by returning all the values in the loop without affecting the iteration of the loop. Iterator uses iter() and next() functions. Generator uses yield keyword.

Q32=CRUD
Ans=Django is based on MVT (Model View Template) architecture and revolves around CRUD (Create, Retrieve, Update, Delete) operations. CRUD can be best explained as an approach to building a Django web application. In general CRUD means performing Create, Retrieve, Update and Delete operations on a table in a database

Q33=What is indexOf?
Ans=indexOf() The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex

Q34=What are joins ?
Ans=A SQL Join statement is used to combine data or rows from two or more tables based on a common field between them

Q35=What is React Js?
Ans=React is a JavaScript library created for building fast and interactive user interfaces for web and mobile applications. It is an open-source, component-based, front-end library.React divides the UI into multiple components, which makes the code easier to debug.

Q36=How to run bootstrap ?
Ans=Create an HTML page
Load Bootstrap via CDN or host it locally
Include jQuery
Load Bootstrap JavaScript
Put it all together

Q37=What is AWS?
Ans=Amazon web service is an online platform that provides scalable and cost-effective cloud computing solutions.

AWS is a broadly adopted cloud platform that offers several on-demand operations like compute power, database storage, content delivery, etc., to help corporates scale and grow.


Q38=How to fetch api?
Ans=Computer systems like software communicate with each other and share information through a layer called an API.
An API contains the set of rules and protocols guiding how two or more systems interact. For example, Facebook's system may interact with Google's system to get information on a user though an API.

fetch('https://ubahthebuilder.tech/posts/1')
.then(data => {
return data.json();
})
.then(post => {
console.log(post.title);
});

const update = {
title: 'A blog post by Kingsley',
body: 'Brilliant post on fetch API',
userId: 1,
};

const options = {
method: 'POST',
headers: {
'Content-Type': 'application/json',
},
body: JSON.stringify(update),
};

fetch('https://jsonplaceholder.typicode.com/posts', options)
  .then(data => {
      if (!data.ok) {
        throw Error(data.status);
       }
       return data.json();
      }).then(update => {
      console.log(update);
      // {
      //
      title: 'A blog post by Kingsley',
      //
      body: 'Brilliant post on fetch API',
      //
      userId: 1,
      //
      id: 101
      // };
      }).catch(e => {
      console.log(e);
      });

Q39=What is Hoisting?
Ans=Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.

Inevitably, this means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local.

console.log(hoist); // Output: undefined

var hoist = 'The variable has been hoisted.';

Q40=Set time out/Set interval
Ans=
setTimeout():

It is a function that execute a JavaScript statement AFTER x interval.

setTimeout(function () {
    something();
}, 1000); // Execute something() 1 second later.
setInterval():

It is a function that execute a JavaScript statement EVERY x interval.

setInterval(function () {
    somethingElse();
}, 2000); // Execute somethingElse() every 2 seconds.
The interval unit is in millisecond for both functions.


